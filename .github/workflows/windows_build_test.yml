name: Windows Build/Test

on:
  # allows us to run workflows manually
  workflow_dispatch:
  push:
    branches:
      - main

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  BuildTest:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { icon: "ðŸŸ¦", sys: MINGW64, mpi: false }
          - { icon: "ðŸŸ¦", sys: MINGW64, mpi: true }
          - { icon: "ðŸŸ¨", sys: UCRT64, mpi: false }
          - { icon: "ðŸŸ¨", sys: UCRT64, mpi: true }
          - { icon: "ðŸŸ§", sys: CLANG64, mpi: false }
          - { icon: "ðŸŸ§", sys: CLANG64, mpi: true }
    name: "${{ matrix.icon }} ${{ matrix.sys }} - ${{ matrix.mpi && 'MPI' || 'No MPI' }}"
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Setup ${{ matrix.sys }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.sys }}
          update: true
          release: false
          path-type: strict
          install: >-
            git
            base-devel
            zlib-devel
            libcurl-devel
            libzstd-devel
          pacboy: >-
            toolchain:p
            cmake:p
            eigen3:p
            python:p
            ${{ matrix.mpi && 'msmpi:p' || '' }}

      - name: Set git to use LF
        run: |
          git config --global core.autocrlf input

      - name: Build and Install HDF5
        run: |
          cd $GITHUB_WORKSPACE
          git clone --depth 1 https://github.com/HDFGroup/hdf5.git -b develop
          cd hdf5
          mkdir build
          cd build
          cmake .. \
            -G "Ninja" \
            -DCMAKE_INSTALL_PREFIX=/c/hdf5 \
            -DBUILD_SHARED_LIBS=ON \
            -DHDF5_ENABLE_PARALLEL=${{ matrix.mpi && 'ON' || 'OFF' }} \
            -DHDF5_BUILD_CPP_LIB=OFF \
            -DHDF5_BUILD_FORTRAN=OFF \
            -DHDF5_BUILD_JAVA=OFF \
            -DHDF5_BUILD_DOC=OFF
          cmake --build . --config Release
          cmake --install . --config Release

      - name: Build and Install MOAB
        run: |
          cd $GITHUB_WORKSPACE
          git clone --depth 1 https://bitbucket.org/ahnaf-tahmid-chowdhury/moab.git -b mingw
          cd moab
          mkdir build
          cd build
          cmake .. \
            -G "Ninja" \
            -DBUILD_SHARED_LIBS=ON \
            -DENABLE_EIGEN3=ON \
            -DENABLE_HDF5=ON \
            -DHDF5_ROOT=/c/hdf5 \
            -DHDF5_NO_FIND_PACKAGE_CONFIG_FILE=ON \
            -DENABLE_MPI=${{ matrix.mpi && 'ON' || 'OFF' }} \
            -DENABLE_BLASLAPACK=OFF \
            -DENABLE_FORTRAN=OFF \
            -DENABLE_IMESH=OFF \
            -DENABLE_TESTING=OFF
          cmake --build . --config Release
          cmake --install . --config Release

      - name: Build and Install DAGMC
        run: |
          cd $GITHUB_WORKSPACE
          git clone https://github.com/ahnaf-tahmid-chowdhury/DAGMC.git -b fix-windows
          cd DAGMC
          git submodule update --init
          mkdir build
          cd build
          cmake .. \
            -G "Ninja" \
            -DCMAKE_INSTALL_PREFIX=/c/dagmc \
            -DHDF5_ROOT=/c/hdf5 \
            -DHDF5_NO_FIND_PACKAGE_CONFIG_FILE=ON \
            -DMOAB_ROOT=/c/moab \
            -DBUILD_SHARED_LIBS=ON
          cmake --build . --config Release
          cmake --install . --config Release

      - name: Test DAGMC
        run: |
          export PATH=$PATH:/c/dagmc/bin
          cd /c/dagmc/tests
          dagmc_pointinvol_test.exe
          dagmc_rayfire_test.exe
          dagmc_simple_test.exe
          dagmc_unit_tests.exe
          make_watertight_cone_tests.exe
          make_watertight_cylinder_tests.exe
          make_watertight_no_curve_sphere_tests.exe
          make_watertight_sphere_n_box_test.exe
